<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://arend-lang.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://arend-lang.github.io/" rel="alternate" type="text/html" /><updated>2022-05-05T22:57:13+03:00</updated><id>https://arend-lang.github.io/feed.xml</id><title type="html">Arend Theorem Prover</title><subtitle>The Arend Theorem Prover</subtitle><author><name>{&quot;avatar&quot;=&gt;&quot;/assets/images/Logo_vert.svg&quot;}</name></author><entry><title type="html">Arend 1.8.0 released</title><link href="https://arend-lang.github.io/2022/04/15/Arend-1.8.0-released.html" rel="alternate" type="text/html" title="Arend 1.8.0 released" /><published>2022-04-15T00:00:00+03:00</published><updated>2022-04-15T00:00:00+03:00</updated><id>https://arend-lang.github.io/2022/04/15/Arend-1.8.0-released</id><content type="html" xml:base="https://arend-lang.github.io/2022/04/15/Arend-1.8.0-released.html">&lt;p&gt;Language updates:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Improved performance&lt;/li&gt;
  &lt;li&gt;Inference of &lt;a href=&quot;/documentation/language-reference/definitions/parameters#implicit-arguments&quot;&gt;unique implicit arguments&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/documentation/language-reference/prelude#path&quot;&gt;Coercion between paths and functions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;A convenient syntax for &lt;a href=&quot;/documentation/language-reference/definitions/hits#another-syntax-for-hits&quot;&gt;defining&lt;/a&gt; HITs and &lt;a href=&quot;/documentation/language-reference/definitions/hits#pattern-matching-on-hits&quot;&gt;pattern matching&lt;/a&gt; on them&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Plugin updates:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#proof-search&quot;&gt;Proof Search&lt;/a&gt; – find declarations by their type (&lt;a href=&quot;https://github.com/JetBrains/intellij-arend/issues/319&quot;&gt;#319&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tracer&quot;&gt;Tracer&lt;/a&gt; – step-by-step typechecking (&lt;a href=&quot;https://github.com/JetBrains/intellij-arend/issues/168&quot;&gt;#168&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#arend-messages-panel&quot;&gt;Re-worked “Arend Messages” panel&lt;/a&gt; (&lt;a href=&quot;https://github.com/JetBrains/intellij-arend/issues/336&quot;&gt;#336&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#arend-messages-printing-customization&quot;&gt;Printing customization&lt;/a&gt; - control over the way of displaying expressions&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Editing:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#live-templates&quot;&gt;Live templates&lt;/a&gt; – advanced completion for keywords (&lt;a href=&quot;https://github.com/JetBrains/intellij-arend/issues/252&quot;&gt;#252&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#optimize-imports&quot;&gt;Optimize imports&lt;/a&gt; – detecting and removing unused imports (&lt;a href=&quot;https://github.com/JetBrains/intellij-arend/issues/11&quot;&gt;#11&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#extract-let&quot;&gt;Extract expression to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\let&lt;/code&gt; binding&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#generate-from-goal&quot;&gt;Generate function from a goal with arguments&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;arend-lib:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New and improved metas:
    &lt;ul&gt;
      &lt;li&gt;Improved &lt;a href=&quot;/documentation/standard-tactics/logic-meta#exists&quot;&gt;Exists&lt;/a&gt; meta and new metas &lt;a href=&quot;/documentation/standard-tactics/logic-meta#given&quot;&gt;Given&lt;/a&gt; and &lt;a href=&quot;/documentation/standard-tactics/logic-meta#forall&quot;&gt;Forall&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;Improved &lt;a href=&quot;/documentation/standard-tactics/logic-meta#contradiction&quot;&gt;contradiction&lt;/a&gt; meta. Now, it can derive contradictions from transitive closure of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;=&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;=&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;New &lt;a href=&quot;/documentation/standard-tactics/paths-meta#simplify&quot;&gt;simplify&lt;/a&gt; meta.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Locales:
    &lt;ul&gt;
      &lt;li&gt;The definition of &lt;a href=&quot;https://github.com/JetBrains/arend-lib/blob/4ea97da483c5bb2e6a22c8d09c03becf17756c7e/src/Topology/Locale.ard#L1116&quot;&gt;discrete locales&lt;/a&gt; and the &lt;a href=&quot;https://github.com/JetBrains/arend-lib/blob/4ea97da483c5bb2e6a22c8d09c03becf17756c7e/src/Topology/Real.ard#L288&quot;&gt;embedding of rationals into reals&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;The definition of &lt;a href=&quot;https://github.com/JetBrains/arend-lib/blob/4ea97da483c5bb2e6a22c8d09c03becf17756c7e/src/Topology/Locale.ard#L200&quot;&gt;overt locales&lt;/a&gt; and &lt;a href=&quot;https://github.com/JetBrains/arend-lib/blob/4ea97da483c5bb2e6a22c8d09c03becf17756c7e/src/Topology/Locale.ard#L325&quot;&gt;open maps&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;The construction of &lt;a href=&quot;https://github.com/JetBrains/arend-lib/blob/4ea97da483c5bb2e6a22c8d09c03becf17756c7e/src/Topology/Locale.ard#L1322&quot;&gt;dense-closed&lt;/a&gt; and &lt;a href=&quot;https://github.com/JetBrains/arend-lib/blob/4ea97da483c5bb2e6a22c8d09c03becf17756c7e/src/Topology/Locale.ard#L1348&quot;&gt;strongly dense-weakly closed&lt;/a&gt; factorization systems on the category of locales.&lt;/li&gt;
      &lt;li&gt;A proof that &lt;a href=&quot;https://github.com/JetBrains/arend-lib/blob/4ea97da483c5bb2e6a22c8d09c03becf17756c7e/src/Topology/Locale.ard#L403&quot;&gt;nuclei form a frame&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/JetBrains/arend-lib/blob/4ea97da483c5bb2e6a22c8d09c03becf17756c7e/src/Topology/Locale.ard#L1153&quot;&gt;Limits&lt;/a&gt; and &lt;a href=&quot;(https://github.com/JetBrains/arend-lib/blob/4ea97da483c5bb2e6a22c8d09c03becf17756c7e/src/Topology/Locale.ard#L1154)&quot;&gt;colimits&lt;/a&gt; of locales.&lt;/li&gt;
      &lt;li&gt;A characterization of embeddings of locales: a map of locales is a regular monomorphism &lt;a href=&quot;https://github.com/JetBrains/arend-lib/blob/4ea97da483c5bb2e6a22c8d09c03becf17756c7e/src/Topology/Locale.ard#L1219&quot;&gt;if&lt;/a&gt; and &lt;a href=&quot;https://github.com/JetBrains/arend-lib/blob/4ea97da483c5bb2e6a22c8d09c03becf17756c7e/src/Topology/Locale.ard#L1237&quot;&gt;only if&lt;/a&gt; the left adjoint is surjective.&lt;/li&gt;
      &lt;li&gt;The definition of (&lt;a href=&quot;https://github.com/JetBrains/arend-lib/blob/4ea97da483c5bb2e6a22c8d09c03becf17756c7e/src/Topology/Locale.ard#L157&quot;&gt;weakly&lt;/a&gt;) &lt;a href=&quot;https://github.com/JetBrains/arend-lib/blob/4ea97da483c5bb2e6a22c8d09c03becf17756c7e/src/Topology/Locale.ard#L155&quot;&gt;regular&lt;/a&gt; locales and a proof that &lt;a href=&quot;https://github.com/JetBrains/arend-lib/blob/4ea97da483c5bb2e6a22c8d09c03becf17756c7e/src/Topology/Real.ard#L253&quot;&gt;the locale of reals is regular&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;The definition of &lt;a href=&quot;https://github.com/JetBrains/arend-lib/blob/4ea97da483c5bb2e6a22c8d09c03becf17756c7e/src/Topology/Locale.ard#L1253&quot;&gt;Hausdorff locales&lt;/a&gt; and a proof that &lt;a href=&quot;https://github.com/JetBrains/arend-lib/blob/4ea97da483c5bb2e6a22c8d09c03becf17756c7e/src/Topology/Locale.ard#L1298&quot;&gt;regular locales are Hausdorff&lt;/a&gt;.&lt;/li&gt;
      &lt;li&gt;The definition of &lt;a href=&quot;https://github.com/JetBrains/arend-lib/blob/4ea97da483c5bb2e6a22c8d09c03becf17756c7e/src/Topology/Locale/Uniform.ard#L64&quot;&gt;uniform locales&lt;/a&gt; and the construction of their &lt;a href=&quot;https://github.com/JetBrains/arend-lib/blob/4ea97da483c5bb2e6a22c8d09c03becf17756c7e/src/Topology/Locale/Uniform.ard#L235&quot;&gt;completion&lt;/a&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The definition of &lt;a href=&quot;https://github.com/JetBrains/arend-lib/blob/4ea97da483c5bb2e6a22c8d09c03becf17756c7e/src/Logic/Rewriting/ARS/AbstractReductionSystem.ard&quot;&gt;abstract reduction systems&lt;/a&gt;, &lt;a href=&quot;https://github.com/JetBrains/arend-lib/blob/4ea97da483c5bb2e6a22c8d09c03becf17756c7e/src/Logic/Rewriting/TRS/HRS.ard#L173&quot;&gt;second-order term rewriting systems&lt;/a&gt;, and a proof that &lt;a href=&quot;https://github.com/JetBrains/arend-lib/blob/4ea97da483c5bb2e6a22c8d09c03becf17756c7e/src/Logic/Rewriting/TRS/Union/Embedding.ard#L22&quot;&gt;the disjoint union of confluent left-linear systems is confluent&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;The definition of &lt;a href=&quot;https://github.com/JetBrains/arend-lib/blob/4ea97da483c5bb2e6a22c8d09c03becf17756c7e/src/Logic/FirstOrder/Algebraic.ard#L27&quot;&gt;algebraic theories&lt;/a&gt;, &lt;a href=&quot;https://github.com/JetBrains/arend-lib/blob/4ea97da483c5bb2e6a22c8d09c03becf17756c7e/src/Logic/FirstOrder/Algebraic/Category.ard#L27&quot;&gt;the category of its models&lt;/a&gt;, and a proof that it has all small &lt;a href=&quot;https://github.com/JetBrains/arend-lib/blob/4ea97da483c5bb2e6a22c8d09c03becf17756c7e/src/Logic/FirstOrder/Algebraic/Category.ard#L34&quot;&gt;limits&lt;/a&gt; and &lt;a href=&quot;https://github.com/JetBrains/arend-lib/blob/4ea97da483c5bb2e6a22c8d09c03becf17756c7e/src/Logic/FirstOrder/Algebraic/Category.ard#L55&quot;&gt;colimits&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;The preorder of &lt;a href=&quot;https://github.com/JetBrains/arend-lib/blob/4ea97da483c5bb2e6a22c8d09c03becf17756c7e/src/Category/Subobj.ard#L15&quot;&gt;subobjects&lt;/a&gt; and &lt;a href=&quot;https://github.com/JetBrains/arend-lib/blob/4ea97da483c5bb2e6a22c8d09c03becf17756c7e/src/Category/Subobj.ard#L37&quot;&gt;regular subobjects&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;The construction of the &lt;a href=&quot;https://github.com/JetBrains/arend-lib/blob/4ea97da483c5bb2e6a22c8d09c03becf17756c7e/src/AG/Scheme.ard#L89&quot;&gt;structure sheaf&lt;/a&gt; on the spectrum of a ring.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;plugin-updates&quot;&gt;Plugin updates&lt;/h2&gt;

&lt;h3 id=&quot;proof-search&quot;&gt;Proof Search&lt;/h3&gt;

&lt;p&gt;Nearly every proof assistant has a problem of the discoverability for proven theorems. For instance, try to recall how a lemma describing the commutativity of addition is called in your favorite proof assistant. Is it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add_comm&lt;/code&gt;? Or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+-comm&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;The new “Proof Search” action helps in this situation. Invoke it and type in a signature of the declaration you are interested in – the IDE will find the declarations with such a signature:&lt;/p&gt;

&lt;div class=&quot;wrapper&quot;&gt;
    &lt;video class=&quot;video-resizable&quot; controls=&quot;&quot; preload=&quot;metadata&quot;&gt;
        &lt;source src=&quot;/assets/Arend-1.8.0-released/proof-search.mp4&quot; /&gt;
        Sorry, your browser doesn't support embedded videos.
    &lt;/video&gt;
&lt;/div&gt;

&lt;p&gt;For more information, please see the &lt;a href=&quot;/documentation/proof-search&quot;&gt;full documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;tracer&quot;&gt;Tracer&lt;/h3&gt;

&lt;p&gt;The tracer is a new feature that allows you typechecking a declaration step-by-step. 
At each step, the IDE shows you the typechecking context for the current expression.&lt;/p&gt;

&lt;div class=&quot;wrapper&quot;&gt;
    &lt;video class=&quot;video-resizable&quot; controls=&quot;&quot; preload=&quot;metadata&quot;&gt;
        &lt;source src=&quot;/assets/Arend-1.8.0-released/tracer.mp4&quot; /&gt;
        Sorry, your browser doesn't support embedded videos.
    &lt;/video&gt;
&lt;/div&gt;

&lt;p&gt;To use the tracer:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Start it via a pop-up menu on a declaration or expression.&lt;/li&gt;
  &lt;li&gt;Step through the expressions back and forth, jump to a specific expression via “Run to Cursor”, and stop early if needed.&lt;/li&gt;
  &lt;li&gt;Inspect the stack and the context in the editor view at each tracing step.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Compared to the “Show Expression Type” action, the tracer works in more contexts, shows more info, but could be slower.&lt;/p&gt;

&lt;h3 id=&quot;arend-messages-panel&quot;&gt;Re-worked “Arend Messages” panel&lt;/h3&gt;

&lt;p&gt;The “Arend Messages” panel shows current goals and errors. We did a number of changes that are aimed to improve the UX around it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Goals and errors are shown in separate panels.&lt;/li&gt;
  &lt;li&gt;Goals’ panel is not cleaned up when you remove the goal. It is only removed when a declaration, which contained a goal, has no more errors or other goals.&lt;/li&gt;
  &lt;li&gt;Implicit goals (goals without a corresponding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{?}&lt;/code&gt; element in the source code) are not shown by default.&lt;/li&gt;
  &lt;li&gt;The vertical layout is supported.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;wrapper&quot;&gt;
    &lt;video class=&quot;video-resizable&quot; controls=&quot;&quot; preload=&quot;metadata&quot;&gt;
        &lt;source src=&quot;/assets/Arend-1.8.0-released/arend-messages.mp4&quot; /&gt;
        Sorry, your browser doesn't support embedded videos.
    &lt;/video&gt;
&lt;/div&gt;

&lt;h4 id=&quot;arend-messages-printing-customization&quot;&gt;Printing customization&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;This feature is incubating, it may be completely changed in future releases, even minor ones.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The proof terms which appear during the development of some theory may be quite large. It is often hard to read and understand them, so in order to show these terms to the user we sometimes omit certain subterms. A typical example of a kind of these subterms is implicit arguments – they often may be inferred from the context of the term, so displaying them just adds unnecessary noise. However, we also need a way to show these subterms for the purposes of debugging or better understanding the term semantics. Arend allows to configure pretty-printer options by the eye button in Arend Messages toolwindow.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Arend-1.8.0-released/show-pretty-printer-options.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This approach has a flaw: it is done in an all-or-nothing way. You are offered to display &lt;em&gt;every&lt;/em&gt; omitted subterm of a certain kind, or not display them at all. Therefore, after changing an option of the pretty printer you become lost in the term.&lt;/p&gt;

&lt;p&gt;Arend 1.8.0 offers a solution: we introduce &lt;em&gt;printing customization&lt;/em&gt; right in the displayed term. You can put a cursor to a source of omittable subterms and then the appeared popup will help you to uncover what was hidden. Currently it works only for implicit arguments and types of parameters in lambda expression.&lt;/p&gt;

&lt;div class=&quot;wrapper&quot;&gt;
    &lt;video class=&quot;video-resizable&quot; controls=&quot;&quot; preload=&quot;metadata&quot;&gt;
        &lt;source src=&quot;/assets/Arend-1.8.0-released/revealing.mp4&quot; /&gt;
        Sorry, your browser doesn't support embedded videos.
    &lt;/video&gt;
&lt;/div&gt;

&lt;h3 id=&quot;live-templates&quot;&gt;Live templates&lt;/h3&gt;

&lt;p&gt;Live templates are smart code snippets. They speed up editing by providing a completion for common code patterns. 
This release includes such templates for the majority of Arend keywords:&lt;/p&gt;

&lt;div class=&quot;wrapper&quot;&gt;
    &lt;video class=&quot;video-resizable&quot; controls=&quot;&quot; preload=&quot;metadata&quot;&gt;
        &lt;source src=&quot;/assets/Arend-1.8.0-released/live-templates.mp4&quot; /&gt;
        Sorry, your browser doesn't support embedded videos.
    &lt;/video&gt;
&lt;/div&gt;

&lt;p&gt;In addition, you can define your own templates in “Preferences | Editor | Live Templates | Arend”:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Arend-1.8.0-released/live-templates-custom.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;optimize-imports&quot;&gt;Optimize imports&lt;/h3&gt;

&lt;p&gt;Keeping imports clean is easier with this release. The IDE detects unused imports and highlights them in grey color.
To remove such imports use the new “Code | Optimize Imports” action:&lt;/p&gt;

&lt;div class=&quot;wrapper&quot;&gt;
    &lt;video class=&quot;video-resizable&quot; controls=&quot;&quot; preload=&quot;metadata&quot;&gt;
        &lt;source src=&quot;/assets/Arend-1.8.0-released/optimize-imports.mp4&quot; /&gt;
        Sorry, your browser doesn't support embedded videos.
    &lt;/video&gt;
&lt;/div&gt;

&lt;p&gt;Aside from just removing, this action can optimize the imports in various ways, for example, import all declarations from a module explicitly.
See “Preferences | Editor | Code Style | Arend” for the options.&lt;/p&gt;

&lt;h3 id=&quot;extract-let&quot;&gt;Extract expression to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\let&lt;/code&gt; binding&lt;/h3&gt;

&lt;p&gt;If you have a complex expression and want to extract some of its parts into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\let&lt;/code&gt; bindings, 
the new “Create \let-binding” intention is there to automate the process:&lt;/p&gt;

&lt;div class=&quot;wrapper&quot;&gt;
    &lt;video class=&quot;video-resizable&quot; controls=&quot;&quot; preload=&quot;metadata&quot;&gt;
        &lt;source src=&quot;/assets/Arend-1.8.0-released/let.mp4&quot; /&gt;
        Sorry, your browser doesn't support embedded videos.
    &lt;/video&gt;
&lt;/div&gt;

&lt;h3 id=&quot;generate-from-goal&quot;&gt;Generate function from a goal with arguments&lt;/h3&gt;

&lt;p&gt;The “Generate function from a goal” intention is smarter now. When you invoke it on a goal with arguments, 
the resulting function will get parameters corresponding to those arguments:&lt;/p&gt;

&lt;div class=&quot;wrapper&quot;&gt;
    &lt;video class=&quot;video-resizable&quot; controls=&quot;&quot; preload=&quot;metadata&quot;&gt;
        &lt;source src=&quot;/assets/Arend-1.8.0-released/gen-func.mp4&quot; /&gt;
        Sorry, your browser doesn't support embedded videos.
    &lt;/video&gt;
&lt;/div&gt;</content><author><name>{&quot;avatar&quot;=&gt;&quot;/assets/images/Logo_vert.svg&quot;}</name></author><summary type="html">Language updates:</summary></entry><entry><title type="html">New IntelliJ Arend tutorial</title><link href="https://arend-lang.github.io/2022/02/08/New-IntelliJ-Arend-tutorial.html" rel="alternate" type="text/html" title="New IntelliJ Arend tutorial" /><published>2022-02-08T00:00:00+03:00</published><updated>2022-02-08T00:00:00+03:00</updated><id>https://arend-lang.github.io/2022/02/08/New-IntelliJ-Arend-tutorial</id><content type="html" xml:base="https://arend-lang.github.io/2022/02/08/New-IntelliJ-Arend-tutorial.html">&lt;p&gt;There is a new tutorial on &lt;a href=&quot;/documentation/intellij-arend-tutorial&quot;&gt;interactive theorem proving with IntelliJ Arend&lt;/a&gt;. 
Check it out to learn about the features of IntelliJ Arend that speed-up theorem proving, make it more convenient and truly interactive!&lt;/p&gt;</content><author><name>{&quot;avatar&quot;=&gt;&quot;/assets/images/Logo_vert.svg&quot;}</name></author><summary type="html">There is a new tutorial on interactive theorem proving with IntelliJ Arend. Check it out to learn about the features of IntelliJ Arend that speed-up theorem proving, make it more convenient and truly interactive!</summary></entry><entry><title type="html">Arend 1.7.0 released</title><link href="https://arend-lang.github.io/2021/09/06/Arend-1.7.0-released.html" rel="alternate" type="text/html" title="Arend 1.7.0 released" /><published>2021-09-06T00:00:00+03:00</published><updated>2021-09-06T00:00:00+03:00</updated><id>https://arend-lang.github.io/2021/09/06/Arend-1.7.0-released</id><content type="html" xml:base="https://arend-lang.github.io/2021/09/06/Arend-1.7.0-released.html">&lt;p&gt;Language updates:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/documentation/language-reference/definitions/types&quot;&gt;Type synonyms&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/documentation/language-reference/prelude#array&quot;&gt;Arrays&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Pattern matching in &lt;a href=&quot;/documentation/language-reference/expressions/pi#pattern-matching&quot;&gt;lambdas&lt;/a&gt; and &lt;a href=&quot;/documentation/language-reference/expressions/let#pattern-matching&quot;&gt;\let expressions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/documentation/language-reference/expressions/universes#level-parameters&quot;&gt;Multiple level parameters&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ability to &lt;a href=&quot;/documentation/language-reference/definitions/records#levels&quot;&gt;change levels in subclasses&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Improved inference of implicit arguments of function types&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Plugin updates:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New quick-fixes:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#hide-import&quot;&gt;Hide import&lt;/a&gt; (&lt;a href=&quot;https://github.com/JetBrains/intellij-arend/issues/259&quot;&gt;#259&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#instance-inference-fixes&quot;&gt;Fix failed class instance inference&lt;/a&gt; (&lt;a href=&quot;https://github.com/JetBrains/intellij-arend/issues/114&quot;&gt;#114&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;New intentions:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#replace-long-name&quot;&gt;Replace with short name&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#generate-function&quot;&gt;Generate function&lt;/a&gt; (&lt;a href=&quot;https://github.com/JetBrains/intellij-arend/issues/104&quot;&gt;#104&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#swap-infix-operator&quot;&gt;Swap infix operator arguments&lt;/a&gt; (&lt;a href=&quot;https://github.com/JetBrains/intellij-arend/issues/44&quot;&gt;#44&lt;/a&gt;)&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#add-remove-parens&quot;&gt;Add and Remove clarifying parentheses&lt;/a&gt; (&lt;a href=&quot;https://github.com/JetBrains/intellij-arend/issues/238&quot;&gt;#238&lt;/a&gt;)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#redundant-parens&quot;&gt;New “Redundant parentheses” inspection&lt;/a&gt; (&lt;a href=&quot;https://github.com/JetBrains/intellij-arend/issues/237&quot;&gt;#237&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#prelude&quot;&gt;Better support for Prelude&lt;/a&gt; (&lt;a href=&quot;https://github.com/JetBrains/intellij-arend/issues/254&quot;&gt;#254&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#metas&quot;&gt;Better support for Metas&lt;/a&gt; (&lt;a href=&quot;https://github.com/JetBrains/intellij-arend/issues/261&quot;&gt;#261&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;arend-lib:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/JetBrains/arend-lib/blob/master/src/Topology/Real.ard&quot;&gt;The locale of real numbers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/JetBrains/arend-lib/blob/master/src/Topology/Real.ard&quot;&gt;Compactness of the interval and local compactness of reals&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/JetBrains/arend-lib/blob/master/src/AG/Scheme.ard&quot;&gt;Spectrum of a ring&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/JetBrains/arend-lib/blob/master/src/Category/Topos/Sheaf.ard&quot;&gt;Sheaves&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/documentation/standard-tactics/paths-meta#algebraic-rewrite&quot;&gt;Algebraic rewrite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;plugin-updates&quot;&gt;Plugin updates&lt;/h2&gt;

&lt;h3 id=&quot;hide-import&quot;&gt;Hide import&lt;/h3&gt;

&lt;p&gt;To bring some declarations to the current scope we use imports. If some imported names are already in scope,
they will be ignored and plugin will show a warning. New “Hide import” quick-fix explicitly hides such names 
by adding them to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\hiding&lt;/code&gt; directive:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Arend-1.7.0-released/hide-import.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;instance-inference-fixes&quot;&gt;Fix failed class instance inference&lt;/h3&gt;

&lt;p&gt;If you use fields of some class and Arend cannot infer an appropriate instance for it, you will get an error. 
New quick-fixes help to handle this issue:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;“Import instance” imports an instance available somewhere outside the current scope, say, from arend-lib.&lt;/li&gt;
  &lt;li&gt;“Add local instance” adds an implicit parameter of the class type to the current function.&lt;/li&gt;
  &lt;li&gt;“Replace local parameter with local instance” is suggested when you already have a parameter 
that can be used as a classifying field. The fix replaces a type of that parameter with the class type.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Arend-1.7.0-released/instance-inference-fixes.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;replace-long-name&quot;&gt;Replace with short name&lt;/h3&gt;

&lt;p&gt;Replaces a reference of the form &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A.B&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;B&lt;/code&gt; adding an appropriate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\open&lt;/code&gt; directive:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Arend-1.7.0-released/replace-long-name.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;generate-function&quot;&gt;Generate function&lt;/h3&gt;

&lt;p&gt;This intention comes in 2 flavors. The first one generates a function from a goal:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Arend-1.7.0-released/extract-goal.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The second one extracts a selected expression to a separate function:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Arend-1.7.0-released/extract-expression.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In both cases you get a function with parameters and return type inferred from the type of the initial expression.&lt;/p&gt;

&lt;h3 id=&quot;swap-infix-operator&quot;&gt;Swap infix operator arguments&lt;/h3&gt;

&lt;p&gt;Swaps arguments of an infix operator:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Arend-1.7.0-released/swap-infix-operator.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;add-remove-parens&quot;&gt;Add and Remove clarifying parentheses&lt;/h3&gt;

&lt;p&gt;Allows adding and removing clarifying parentheses to a sequence of binary operators:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Arend-1.7.0-released/add-remove-parens.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;redundant-parens&quot;&gt;“Redundant parentheses” inspection&lt;/h3&gt;

&lt;p&gt;Detects redundant parentheses and suggests a fix to remove them:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Arend-1.7.0-released/redundant-parens.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;prelude&quot;&gt;Better support for Prelude&lt;/h3&gt;

&lt;p&gt;This release brings a couple of improvements that make Prelude more discoverable:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Prelude is shown in External Libraries.&lt;/li&gt;
  &lt;li&gt;Definitions from Prelude are discoverable via Navigate Symbol, Navigate File, and Find Usages.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Arend-1.7.0-released/prelude.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;metas&quot;&gt;Better support for Metas&lt;/h3&gt;

&lt;p&gt;Discoverability of language extensions (aka metas) is also improved in the following ways:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Metas are shown as Arend files in External Libraries.&lt;/li&gt;
  &lt;li&gt;Metas are discoverable via Navigate Symbol and Navigate File.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/Arend-1.7.0-released/metas.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>{&quot;avatar&quot;=&gt;&quot;/assets/images/Logo_vert.svg&quot;}</name></author><summary type="html">Language updates:</summary></entry><entry><title type="html">Arend 1.6.0 released</title><link href="https://arend-lang.github.io/2021/02/28/Arend-1.6.0-released.html" rel="alternate" type="text/html" title="Arend 1.6.0 released" /><published>2021-02-28T00:00:00+03:00</published><updated>2021-02-28T00:00:00+03:00</updated><id>https://arend-lang.github.io/2021/02/28/Arend-1.6.0-released</id><content type="html" xml:base="https://arend-lang.github.io/2021/02/28/Arend-1.6.0-released.html">&lt;p&gt;Language updates:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/documentation/language-reference/prelude#fin&quot;&gt;Built-in finite types&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/documentation/language-reference/definitions/records#default&quot;&gt;\default&lt;/a&gt; implementations&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/documentation/language-reference/definitions/coercion&quot;&gt;\coerce&lt;/a&gt; to function types&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/documentation/language-reference/definitions/coercion#fields-and-constructors&quot;&gt;\coerce&lt;/a&gt; for fields and constructors&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/documentation/language-reference/expressions/let#have&quot;&gt;\have&lt;/a&gt; declaration&lt;/li&gt;
  &lt;li&gt;Dot-syntax for &lt;a href=&quot;/documentation/language-reference/definitions/records#dynamic-definitions&quot;&gt;dynamic definitions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Added more &lt;a href=&quot;/documentation/language-reference/prelude#nat-and-int&quot;&gt;computational rules&lt;/a&gt; for &lt;span class=&quot;inl-highlight&quot;&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;/span&gt; and &lt;span class=&quot;inl-highlight&quot;&gt;-&lt;/span&gt; functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Plugin updates:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Quick fixes for “impossible elimination” and “expected constructor” errors&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;API:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Pattern typechecker&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;arend-lib:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Locales and topological spaces&lt;/li&gt;
  &lt;li&gt;Functor category&lt;/li&gt;
  &lt;li&gt;Euclidean domains and (extended) Euclidean algorithm&lt;/li&gt;
  &lt;li&gt;The quotient ring &lt;span class=&quot;inl-highlight&quot;&gt;Z/nZ&lt;/span&gt; and the field structure on it for prime &lt;span class=&quot;inl-highlight&quot;&gt;n&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;Solvers for commutative monoids and rings are implemented in the &lt;a href=&quot;/documentation/standard-tactics/algebra-meta#equation&quot;&gt;equation&lt;/a&gt; meta&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/documentation/standard-tactics/paths-meta#extensionality-meta&quot;&gt;Extensionality&lt;/a&gt; meta&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/documentation/standard-tactics/category-meta#structure-identity-principle&quot;&gt;Structure identity principle&lt;/a&gt; meta&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/documentation/standard-tactics/paths-meta#simp_coe&quot;&gt;simp_coe&lt;/a&gt; meta&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/documentation/standard-tactics/meta#cases&quot;&gt;cases&lt;/a&gt; meta and improved &lt;a href=&quot;/documentation/standard-tactics/meta#mcases&quot;&gt;mcases&lt;/a&gt; meta&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/documentation/standard-tactics/meta#unfold&quot;&gt;unfold&lt;/a&gt; and &lt;a href=&quot;/documentation/standard-tactics/meta#unfold_let&quot;&gt;unfold_let&lt;/a&gt; metas&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;avatar&quot;=&gt;&quot;/assets/images/Logo_vert.svg&quot;}</name></author><summary type="html">Language updates: Built-in finite types \default implementations \coerce to function types \coerce for fields and constructors \have declaration Dot-syntax for dynamic definitions Added more computational rules for + and - functions</summary></entry><entry><title type="html">Arend 1.5.0 released</title><link href="https://arend-lang.github.io/2020/10/10/Arend-1.5.0-released.html" rel="alternate" type="text/html" title="Arend 1.5.0 released" /><published>2020-10-10T00:00:00+03:00</published><updated>2020-10-10T00:00:00+03:00</updated><id>https://arend-lang.github.io/2020/10/10/Arend-1.5.0-released</id><content type="html" xml:base="https://arend-lang.github.io/2020/10/10/Arend-1.5.0-released.html">&lt;p&gt;Language updates:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;String literals, which can be used in meta code&lt;/li&gt;
  &lt;li&gt;Meta resolvers, which can be used to modify the scoping rules for meta definitions&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/documentation/language-reference/definitions/parameters#strict-parameters&quot;&gt;\strict parameters&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Improved performance&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/documentation/language-reference/definitions/metas&quot;&gt;Defined metas&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Libraries can be loaded from zip archives without unpacking&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Plugin updates:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Completion of not-imported definitions&lt;/li&gt;
  &lt;li&gt;Rainbow highlighting&lt;/li&gt;
  &lt;li&gt;arend-lib can be downloaded and upgraded from the IDE&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;API:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Arend console, which can be used to print information in the IDE instead of stdout&lt;/li&gt;
  &lt;li&gt;Clauses and coclauses can be passed to metas now&lt;/li&gt;
  &lt;li&gt;Saving and loading of typechecker state&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;arend-lib:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Debug metas (&lt;span class=&quot;inl-highlight&quot;&gt;println&lt;/span&gt;, &lt;span class=&quot;inl-highlight&quot;&gt;random&lt;/span&gt;, &lt;span class=&quot;inl-highlight&quot;&gt;time&lt;/span&gt;)&lt;/li&gt;
  &lt;li&gt;Congruence closure &lt;span class=&quot;inl-highlight&quot;&gt;cong&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;Insertion and tree sort functions&lt;/li&gt;
  &lt;li&gt;Meta &lt;span class=&quot;inl-highlight&quot;&gt;mcases&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;avatar&quot;=&gt;&quot;/assets/images/Logo_vert.svg&quot;}</name></author><summary type="html">Language updates: String literals, which can be used in meta code Meta resolvers, which can be used to modify the scoping rules for meta definitions \strict parameters Improved performance Defined metas Libraries can be loaded from zip archives without unpacking</summary></entry><entry><title type="html">Arend 1.4.0 released</title><link href="https://arend-lang.github.io/2020/06/29/Arend-1.4.0-released.html" rel="alternate" type="text/html" title="Arend 1.4.0 released" /><published>2020-06-29T00:00:00+03:00</published><updated>2020-06-29T00:00:00+03:00</updated><id>https://arend-lang.github.io/2020/06/29/Arend-1.4.0-released</id><content type="html" xml:base="https://arend-lang.github.io/2020/06/29/Arend-1.4.0-released.html">&lt;p&gt;Language updates:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/documentation/language-reference/expressions/pi#implicit-lambdas&quot;&gt;Implicit lambdas&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/documentation/libraries&quot;&gt;Tests directory&lt;/a&gt; can be used to store files with tests, examples, and other code which is not a part of the library.&lt;/li&gt;
  &lt;li&gt;Improved pretty printer: if some definition is not available in the current context, it will be replaced with its full name.&lt;/li&gt;
  &lt;li&gt;REPL. To run it, use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-i&lt;/code&gt; flag.&lt;/li&gt;
  &lt;li&gt;Arend now supports unicode symbols through &lt;a href=&quot;/documentation/language-reference/definitions#aliases&quot;&gt;aliases&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Equality between disjoint constructors is now considered empty.&lt;/li&gt;
  &lt;li&gt;Added support for incomplete lambdas, let expressions, and tuples. Missing expressions are treated as goals.&lt;/li&gt;
  &lt;li&gt;Implemented tail call optimization.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Plugin updates:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Highlighting and resolving of expressions in error messages.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/about/intellij-features#goals&quot;&gt;Fill goal and refine&lt;/a&gt; intentions can be invoked on goals. The latter is implemented through language extensions.&lt;/li&gt;
  &lt;li&gt;REPL can be invoked from the main menu: &lt;strong&gt;Tools | Show Arend REPL&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/about/intellij-features#aliases&quot;&gt;Aliases support&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Improved goto next/previous error. By default, these actions can be invoked by shortcuts &lt;strong&gt;Alt+F2&lt;/strong&gt; and &lt;strong&gt;Alt+Shift+F2&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;To debug meta definitions, you need to specify a path to Arend jar file in the settings on page &lt;strong&gt;Language &amp;amp; Frameworks | Arend&lt;/strong&gt;.
To run the debugger, click on the gutter icon near some Arend definition and choose “Debug ‘Typecheck …’”.&lt;/li&gt;
  &lt;li&gt;Improved &lt;a href=&quot;/about/intellij-features#quick-documentation&quot;&gt;documentation support&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;API:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Goal solvers can be used to replace goals with expressions.&lt;/li&gt;
  &lt;li&gt;Arend UI allows meta definitions to interact with the user.&lt;/li&gt;
  &lt;li&gt;Level solvers can be used to automatically prove that a type belongs to a certain homotopy level.&lt;/li&gt;
  &lt;li&gt;Number type-checker can be used to elaborate numerical literals to arbitrary expressions.&lt;/li&gt;
  &lt;li&gt;User data in definitions can be used to store arbitrary user data.&lt;/li&gt;
  &lt;li&gt;User data in ContextData can be used to pass information between meta definitions.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;avatar&quot;=&gt;&quot;/assets/images/Logo_vert.svg&quot;}</name></author><summary type="html">Language updates: Implicit lambdas. Tests directory can be used to store files with tests, examples, and other code which is not a part of the library. Improved pretty printer: if some definition is not available in the current context, it will be replaced with its full name. REPL. To run it, use -i flag. Arend now supports unicode symbols through aliases. Equality between disjoint constructors is now considered empty. Added support for incomplete lambdas, let expressions, and tuples. Missing expressions are treated as goals. Implemented tail call optimization.</summary></entry><entry><title type="html">Tutorial Part II</title><link href="https://arend-lang.github.io/2020/06/14/tutorial-part-II.html" rel="alternate" type="text/html" title="Tutorial Part II" /><published>2020-06-14T00:00:00+03:00</published><updated>2020-06-14T00:00:00+03:00</updated><id>https://arend-lang.github.io/2020/06/14/tutorial-part-II</id><content type="html" xml:base="https://arend-lang.github.io/2020/06/14/tutorial-part-II.html">&lt;p&gt;The &lt;a href=&quot;/documentation/tutorial/PartII&quot;&gt;second part&lt;/a&gt; of our tutorial is ready.&lt;/p&gt;</content><author><name>{&quot;avatar&quot;=&gt;&quot;/assets/images/Logo_vert.svg&quot;}</name></author><summary type="html">The second part of our tutorial is ready.</summary></entry><entry><title type="html">Arend 1.3.0 released</title><link href="https://arend-lang.github.io/2020/04/13/Arend-1.3.0-released.html" rel="alternate" type="text/html" title="Arend 1.3.0 released" /><published>2020-04-13T00:00:00+03:00</published><updated>2020-04-13T00:00:00+03:00</updated><id>https://arend-lang.github.io/2020/04/13/Arend-1.3.0-released</id><content type="html" xml:base="https://arend-lang.github.io/2020/04/13/Arend-1.3.0-released.html">&lt;p&gt;We implemented language extensions.
This can be used to implement custom operations on the abstract syntax tree which are not supported by the language.
They can also be used to implement various decision procedures for proof automation.&lt;/p&gt;

&lt;p&gt;Language updates:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Implemented &lt;a href=&quot;/about/arend-features#language-extensions&quot;&gt;language extensions&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Arend now shows conditions in goals which makes it easier to write functions over higher inductive types.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Plugin updates:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Implemented “&lt;a href=&quot;/about/intellij-features#show-types&quot;&gt;show type&lt;/a&gt;” feature.&lt;/li&gt;
  &lt;li&gt;Implemented “&lt;a href=&quot;/about/intellij-features#show-expr&quot;&gt;show (normalized) expression&lt;/a&gt;” feature.
This can be used to see inferred implicit arguments or the result of invocation of some function.&lt;/li&gt;
  &lt;li&gt;Implemented “&lt;a href=&quot;/about/intellij-features#normalize-expr&quot;&gt;replace (sub)expression&lt;/a&gt;” feature.
This can be used to replace an expression with its normalized result.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;avatar&quot;=&gt;&quot;/assets/images/Logo_vert.svg&quot;}</name></author><summary type="html">We implemented language extensions. This can be used to implement custom operations on the abstract syntax tree which are not supported by the language. They can also be used to implement various decision procedures for proof automation.</summary></entry><entry><title type="html">The first part of our tutorial is ready</title><link href="https://arend-lang.github.io/2020/01/17/tutorial-part-I.html" rel="alternate" type="text/html" title="The first part of our tutorial is ready" /><published>2020-01-17T00:00:00+03:00</published><updated>2020-01-17T00:00:00+03:00</updated><id>https://arend-lang.github.io/2020/01/17/tutorial-part-I</id><content type="html" xml:base="https://arend-lang.github.io/2020/01/17/tutorial-part-I.html">&lt;p&gt;We finished the first part of our new &lt;a href=&quot;/documentation/tutorial&quot;&gt;tutorial&lt;/a&gt;.
It covers all the basic constructions of Arend.
It does not mention anything related to homotopy theory.
This will be the topic of the second part.&lt;/p&gt;</content><author><name>{&quot;avatar&quot;=&gt;&quot;/assets/images/Logo_vert.svg&quot;}</name></author><summary type="html">We finished the first part of our new tutorial. It covers all the basic constructions of Arend. It does not mention anything related to homotopy theory. This will be the topic of the second part.</summary></entry><entry><title type="html">Arend 1.2.0 released</title><link href="https://arend-lang.github.io/2019/12/16/Arend-1.2.0-released.html" rel="alternate" type="text/html" title="Arend 1.2.0 released" /><published>2019-12-16T00:00:00+03:00</published><updated>2019-12-16T00:00:00+03:00</updated><id>https://arend-lang.github.io/2019/12/16/Arend-1.2.0-released</id><content type="html" xml:base="https://arend-lang.github.io/2019/12/16/Arend-1.2.0-released.html">&lt;p&gt;We implemented a few features related to classes and pattern matching.
One of these features is pattern matching on &lt;span class=&quot;inl-highlight&quot;&gt;idp &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; a &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; a&lt;/span&gt;, which can be used instead of the J operator.&lt;/p&gt;

&lt;p&gt;Language updates:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Implemented pattern matching on &lt;a href=&quot;/documentation/language-reference/prelude#idp&quot;&gt;idp&lt;/a&gt;.
This feature can be used instead of the J operator to define functions on path types.
This is a standard feature in other proof assistants, but was missing from Arend since it has a different definition of path types.&lt;/li&gt;
  &lt;li&gt;New keyword &lt;a href=&quot;/documentation/language-reference/definitions/classes#classifying-fields&quot;&gt;\noclassifying&lt;/a&gt; can be used to define classes without classifying fields.
Such classes are similar to Agda’s modules and Coq’s sections.&lt;/li&gt;
  &lt;li&gt;The type of a field can be overridden with a subtype in a subclass using new keyword &lt;a href=&quot;/documentation/language-reference/definitions/records#override&quot;&gt;\override&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Variables can be &lt;a href=&quot;/documentation/language-reference/expressions/case#elim-in-case&quot;&gt;eliminated&lt;/a&gt; in &lt;span class=&quot;inl-highlight&quot;&gt;&lt;span class=&quot;k&quot;&gt;\case&lt;/span&gt;&lt;/span&gt; expressions now.&lt;/li&gt;
  &lt;li&gt;Implemented &lt;a href=&quot;/documentation/language-reference/definitions/data#constructor-synonyms&quot;&gt;constructor synonyms&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;It is possible now to implement fields using &lt;a href=&quot;/documentation/language-reference/definitions/functions#patterns-in-coclauses&quot;&gt;pattern matching&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;We decided to make &lt;a href=&quot;/documentation/language-reference/expressions/universes&quot;&gt;\Prop&lt;/a&gt; proof relevant in general (but it is still proof irrelevant in some cases).
The implementation in 1.1.0 was incorrect and it turns out that it is &lt;a href=&quot;https://arxiv.org/abs/1911.08174v1&quot;&gt;impossible&lt;/a&gt; to implement it without loss of the normalization property.&lt;/li&gt;
  &lt;li&gt;Now, fields and implementations in a class are typechecked in the order they are specified (before now implementations were typechecked after fields).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Plugin updates:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Fixed some problems with pattern generator and implemented case split for \Sigma-types and records.&lt;/li&gt;
  &lt;li&gt;It is possible now to adjust the verbosity of pretty printer in error messages.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>{&quot;avatar&quot;=&gt;&quot;/assets/images/Logo_vert.svg&quot;}</name></author><summary type="html">We implemented a few features related to classes and pattern matching. One of these features is pattern matching on idp : a = a, which can be used instead of the J operator.</summary></entry></feed>